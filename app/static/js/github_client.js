class GitHubDeployClient {
    constructor() {
        this.apiBase = '/api/v1/dreamengine';
        this.deploymentInProgress = false;
    }

    async deployProject(projectData, githubToken, deployConfig) {
        if (this.deploymentInProgress) {
            throw new Error('Deployment already in progress');
        }

        this.deploymentInProgress = true;
        
        try {
            const deployRequest = {
                repo_name: deployConfig.repoName,
                description: deployConfig.description,
                files: projectData.files,
                github_token: githubToken,
                user_id: projectData.user_id || 'anonymous',
                auto_deploy: deployConfig.autoDeploy,
                deploy_platform: deployConfig.platform
            };

            const response = await fetch(`${this.apiBase}/deploy`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(deployRequest)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Deployment failed');
            }

            const result = await response.json();
            return result;

        } finally {
            this.deploymentInProgress = false;
        }
    }

    async getDeploymentPlatforms() {
        const response = await fetch(`${this.apiBase}/deploy/platforms`);
        
        if (!response.ok) {
            throw new Error('Failed to fetch deployment platforms');
        }
        
        return await response.json();
    }

    showDeploymentModal(projectData) {
        const modal = this.createDeploymentModal(projectData);
        document.body.appendChild(modal);
        
        // Show modal with animation
        setTimeout(() => modal.classList.add('active'), 10);
    }

    createDeploymentModal(projectData) {
        const modal = document.createElement('div');
        modal.className = 'deployment-modal';
        modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h2>üöÄ Deploy to GitHub</h2>
                    <button class="modal-close">&times;</button>
                </div>
                
                <div class="modal-body">
                    <div class="deploy-form">
                        <div class="form-group">
                            <label>GitHub Token</label>
                            <input type="password" id="github-token" placeholder="ghp_xxxxxxxxxxxx">
                            <small>Create a token at: github.com/settings/tokens</small>
                        </div>
                        
                        <div class="form-group">
                            <label>Repository Name</label>
                            <input type="text" id="repo-name" placeholder="my-awesome-app">
                        </div>
                        
                        <div class="form-group">
                            <label>Description</label>
                            <textarea id="repo-description" placeholder="Generated by DreamEngine"></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>Deployment Platform</label>
                            <select id="deploy-platform">
                                <option value="render">Render (Recommended)</option>
                                <option value="railway">Railway</option>
                                <option value="vercel">Vercel</option>
                                <option value="heroku">Heroku (Manual)</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="auto-deploy" checked>
                                Auto-setup deployment (when available)
                            </label>
                        </div>
                    </div>
                    
                    <div class="deployment-progress" id="deployment-progress" style="display: none;">
                        <div class="progress-bar">
                            <div class="progress-fill"></div>
                        </div>
                        <div class="progress-text">Deploying...</div>
                    </div>
                    
                    <div class="deployment-result" id="deployment-result" style="display: none;">
                        <!-- Results will be inserted here -->
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button class="btn-secondary" id="cancel-deploy">Cancel</button>
                    <button class="btn-primary" id="start-deploy">üöÄ Deploy Now</button>
                </div>
            </div>
        `;

        // Add event listeners
        this.setupModalEvents(modal, projectData);
        
        return modal;
    }

    setupModalEvents(modal, projectData) {
        const closeBtn = modal.querySelector('.modal-close');
        const cancelBtn = modal.querySelector('#cancel-deploy');
        const deployBtn = modal.querySelector('#start-deploy');
        const overlay = modal.querySelector('.modal-overlay');

        // Close modal events
        [closeBtn, cancelBtn, overlay].forEach(el => {
            el.addEventListener('click', () => this.closeModal(modal));
        });

        // Deploy button event
        deployBtn.addEventListener('click', () => {
            this.startDeployment(modal, projectData);
        });

        // Escape key to close
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') this.closeModal(modal);
        });
    }

    async startDeployment(modal, projectData) {
        const formData = this.getFormData(modal);
        const progressDiv = modal.querySelector('#deployment-progress');
        const resultDiv = modal.querySelector('#deployment-result');
        const deployBtn = modal.querySelector('#start-deploy');

        // Validate form
        if (!formData.githubToken || !formData.repoName) {
            alert('Please fill in GitHub token and repository name');
            return;
        }

        // Show progress
        progressDiv.style.display = 'block';
        deployBtn.disabled = true;
        deployBtn.textContent = 'Deploying...';

        try {
            const result = await this.deployProject(projectData, formData.githubToken, {
                repoName: formData.repoName,
                description: formData.description,
                platform: formData.platform,
                autoDeploy: formData.autoDeploy
            });

            // Show success result
            this.showDeploymentResult(resultDiv, result);
            progressDiv.style.display = 'none';

        } catch (error) {
            // Show error
            this.showDeploymentError(resultDiv, error.message);
            progressDiv.style.display = 'none';
        } finally {
            deployBtn.disabled = false;
            deployBtn.textContent = 'üöÄ Deploy Now';
        }
    }

    getFormData(modal) {
        return {
            githubToken: modal.querySelector('#github-token').value,
            repoName: modal.querySelector('#repo-name').value,
            description: modal.querySelector('#repo-description').value,
            platform: modal.querySelector('#deploy-platform').value,
            autoDeploy: modal.querySelector('#auto-deploy').checked
        };
    }

    showDeploymentResult(container, result) {
        container.style.display = 'block';
        container.innerHTML = `
            <div class="success-result">
                <div class="result-header">
                    <span class="success-icon">‚úÖ</span>
                    <h3>Deployment Successful!</h3>
                </div>
                
                <div class="result-links">
                    <a href="${result.repo_url}" target="_blank" class="result-link">
                        üìÅ View Repository
                    </a>
                    ${result.deploy_url ? `
                        <a href="${result.deploy_url}" target="_blank" class="result-link">
                            üåê View Live App
                        </a>
                    ` : ''}
                </div>
                
                ${result.setup_instructions.length > 0 ? `
                    <div class="setup-instructions">
                        <h4>Setup Instructions:</h4>
                        <ol>
                            ${result.setup_instructions.map(step => `<li>${step}</li>`).join('')}
                        </ol>
                    </div>
                ` : ''}
                
                <div class="deployment-stats">
                    <small>Deployed in ${result.deployment_time_seconds}s</small>
                </div>
            </div>
        `;
    }

    showDeploymentError(container, errorMessage) {
        container.style.display = 'block';
        container.innerHTML = `
            <div class="error-result">
                <div class="result-header">
                    <span class="error-icon">‚ùå</span>
                    <h3>Deployment Failed</h3>
                </div>
                <div class="error-message">
                    ${errorMessage}
                </div>
                <div class="error-help">
                    <p>Common issues:</p>
                    <ul>
                        <li>Invalid GitHub token</li>
                        <li>Repository name already exists</li>
                        <li>Insufficient permissions</li>
                    </ul>
                </div>
            </div>
        `;
    }

    closeModal(modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            }
        }, 300);
    }
}

// Initialize GitHub client
window.githubClient = new GitHubDeployClient();

// Add deploy button to existing UI
document.addEventListener('DOMContentLoaded', () => {
    // This will integrate with existing DreamEngine UI
    const addDeployButton = () => {
        const generationResults = document.querySelector('.generation-results');
        if (generationResults && !document.querySelector('.deploy-button')) {
            const deployBtn = document.createElement('button');
            deployBtn.className = 'btn-primary deploy-button';
            deployBtn.innerHTML = 'üöÄ Deploy to GitHub';
            deployBtn.onclick = () => {
                const projectData = window.lastGenerationResult || {};
                window.githubClient.showDeploymentModal(projectData);
            };
            generationResults.appendChild(deployBtn);
        }
    };

    // Check for results periodically
    setInterval(addDeployButton, 1000);
});
