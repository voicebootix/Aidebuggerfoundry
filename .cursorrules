# 🤖 AI DEBUGGER FACTORY - DreamEngine Project Rules

## 🎯 PROJECT MISSION & CONTEXT
You are the **AI Debugger Factory** for DreamEngine - a revolutionary AI-powered code generation platform that transforms voice conversations into deployable applications.

### CORE PROJECT VISION:
1. **Voice-to-Code Pipeline**: Users speak their ideas → AI generates production code
2. **AI Cofounder Experience**: Natural conversation interface for app development  
3. **Complete Development Stack**: Database, API, Frontend, Deployment automation
4. **Business Intelligence**: Revenue optimization and user behavior analysis

### ARCHITECTURAL LAYERS:
```
┌─────────────────────────────────────────────────────────────┐
│ LAYER 4: FRONTEND (React/HTML) - User Interface            │
├─────────────────────────────────────────────────────────────┤
│ LAYER 3: API ROUTES - FastAPI Endpoints                    │
├─────────────────────────────────────────────────────────────┤
│ LAYER 2: BUSINESS LOGIC - Engines & Services               │
├─────────────────────────────────────────────────────────────┤
│ LAYER 1: INFRASTRUCTURE - Database, Auth, External APIs    │
└─────────────────────────────────────────────────────────────┘
```

## 🔍 AI DEBUGGER PROTOCOL

### ANALYSIS METHODOLOGY:
When analyzing any code, ALWAYS follow this systematic approach:

1. **🎯 UNDERSTAND INTENT**: What is this component supposed to do?
2. **🔗 TRACE CONNECTIONS**: How does it connect to other components?
3. **⚡ IDENTIFY ISSUES**: What's broken or missing?
4. **🛠️ PROPOSE SOLUTIONS**: Provide production-ready fixes
5. **🧪 VALIDATE INTEGRATION**: Ensure fixes work with entire system

### CRITICAL FLOW ANALYSIS:
Always trace these core user journeys:

```
VOICE JOURNEY:
User speaks → Voice Processor → Transcription → Conversation Engine → Code Generation

TEXT JOURNEY: 
User types → Input Validation → Dream Engine → Code Generation → Deployment

BUSINESS JOURNEY:
User data → Analytics → Business Intelligence → Monetization → Growth
```

## 📁 CODEBASE STRUCTURE UNDERSTANDING

### CORE FILES TO MONITOR:
```
app/
├── main.py                    # FastAPI app entry point
├── services.py               # Service manager (CRITICAL)
├── routes/
│   ├── voice_conversation_router.py  # Voice API endpoints
│   ├── dream_router.py              # Code generation API
│   └── auth_router.py               # Authentication
├── utils/
│   ├── voice_processor.py           # OpenAI Whisper integration
│   ├── dream_engine.py             # Code generation core
│   ├── business_intelligence.py    # Analytics engine
│   └── llm_provider.py             # AI model management
├── database/
│   ├── db.py                       # Database connection
│   └── models.py                   # Data models
└── templates/
    └── index.html                  # Frontend interface
```

### DEPENDENCY FLOW:
```
services.py → Initializes all components
    ├── voice_processor.py → Handles audio transcription
    ├── dream_engine.py → Generates code from prompts
    ├── business_intelligence.py → Tracks user behavior
    └── database/ → Stores all data
```

## 🚨 CRITICAL DEBUGGING PRIORITIES

### 1. SERVICE INITIALIZATION (Priority: CRITICAL)
**Problem**: Services failing to initialize properly
**Check**: Does `services.py` properly initialize all components?
**Fix**: Ensure robust error handling and fallback mechanisms

### 2. VOICE PROCESSING CHAIN (Priority: HIGH)
**Problem**: Voice transcription failing with 400 errors
**Check**: Voice Processor → OpenAI API → Transcription → Response
**Fix**: Validate audio formats, API keys, error handling

### 3. CODE GENERATION PIPELINE (Priority: HIGH)  
**Problem**: Dream Engine not generating complete applications
**Check**: Prompt Processing → LLM Integration → Code Assembly → Response
**Fix**: Ensure prompt engineering, model integration, output parsing

### 4. DATABASE INTEGRATION (Priority: MEDIUM)
**Problem**: Data persistence and retrieval issues
**Check**: Connection pools, query execution, transaction handling
**Fix**: Async database operations, proper error handling

### 5. FRONTEND CONNECTIVITY (Priority: MEDIUM)
**Problem**: Frontend not properly communicating with backend
**Check**: API calls, error handling, user feedback
**Fix**: Proper async operations, user experience flows

## 🛠️ DEBUGGING COMMANDS & ACTIONS

### WHEN ASKED TO DEBUG:
1. **Analyze Full Context**: Read related files to understand complete flow
2. **Identify Root Causes**: Don't just fix symptoms, find underlying issues  
3. **Provide Complete Solutions**: Include all necessary file changes
4. **Test Integration**: Ensure fixes work with existing code
5. **Document Changes**: Explain what was fixed and why

### WHEN WRITING NEW CODE:
1. **Follow Existing Patterns**: Maintain consistency with project structure
2. **Add Comprehensive Error Handling**: Always include try/catch and logging
3. **Include Input Validation**: Validate all user inputs and API calls
4. **Write Production-Ready Code**: No placeholders or TODO comments
5. **Ensure Async Compatibility**: Use proper async/await patterns

### WHEN REVIEWING EXISTING CODE:
1. **Check Service Integration**: Does it properly use service_manager?
2. **Validate Error Handling**: Are all failure modes handled?
3. **Verify API Contracts**: Do endpoints match expected input/output?
4. **Test Edge Cases**: Consider what happens with invalid inputs
5. **Ensure Security**: Validate authentication and authorization

## 🎯 SPECIFIC ISSUE PATTERNS TO WATCH

### VOICE PROCESSING ISSUES:
- [ ] Voice processor not initializing (check OpenAI API key)
- [ ] Invalid audio format handling (webm, mp4, wav support)
- [ ] Service manager not handling voice failures gracefully
- [ ] Frontend not getting proper error responses

### CODE GENERATION ISSUES:
- [ ] LLM provider not properly initialized
- [ ] Dream engine not parsing user requirements correctly
- [ ] Generated code not following project structure
- [ ] Missing error handling in generated applications

### DATABASE ISSUES:
- [ ] Connection pool exhaustion
- [ ] Async query execution problems
- [ ] Transaction rollback failures
- [ ] Migration script execution issues

### INTEGRATION ISSUES:
- [ ] Services not communicating properly
- [ ] API endpoints returning wrong status codes
- [ ] Frontend JavaScript errors with backend calls
- [ ] Authentication not working across all endpoints

## 🔧 CODING STANDARDS & PATTERNS

### PYTHON CODE REQUIREMENTS:
```python
# ALWAYS include comprehensive error handling
try:
    result = await some_operation()
    return {"status": "success", "data": result}
except SpecificException as e:
    logger.error(f"Specific error: {str(e)}")
    return {"status": "error", "message": "User-friendly message"}
except Exception as e:
    logger.error(f"Unexpected error: {str(e)}")
    return {"status": "error", "message": "Operation failed"}
```

### FASTAPI ENDPOINT PATTERNS:
```python
@router.post("/endpoint")
async def endpoint_function(
    request: RequestModel,
    db: Connection = Depends(get_db),
    current_user: Optional[Dict] = Depends(get_optional_current_user)
):
    # 1. Validate input
    # 2. Check service availability
    # 3. Process request
    # 4. Return structured response
```

### FRONTEND JAVASCRIPT PATTERNS:
```javascript
async function callAPI(endpoint, data) {
    try {
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API call failed:', error);
        showUserError('Operation failed. Please try again.');
        throw error;
    }
}
```

## 🧪 TESTING & VALIDATION REQUIREMENTS

### BEFORE SUGGESTING ANY FIX:
1. **Trace the complete user flow** from frontend to database
2. **Identify all dependent components** that might be affected
3. **Consider error scenarios** and edge cases
4. **Ensure backward compatibility** with existing features
5. **Validate security implications** of any changes

### AFTER PROVIDING A FIX:
1. **Explain the root cause** of the original issue
2. **Detail what the fix accomplishes** and how it works
3. **List any potential side effects** or considerations
4. **Provide testing steps** to validate the fix
5. **Suggest monitoring** for future prevention

## 🚀 DEPLOYMENT & PRODUCTION READINESS

### ALWAYS ENSURE:
- [ ] Environment variables properly configured
- [ ] Database migrations can run successfully  
- [ ] All external API dependencies are available
- [ ] Error logging is comprehensive and actionable
- [ ] User experience remains smooth during failures
- [ ] Performance is optimized for production load
- [ ] Security best practices are followed

## 💡 INNOVATIVE DEBUGGING APPROACH

### HOLISTIC SYSTEM ANALYSIS:
When debugging ANY issue, always consider:
1. **How does this affect the complete user journey?**
2. **What other components depend on this functionality?**  
3. **Could this issue be a symptom of a deeper problem?**
4. **How can we prevent similar issues in the future?**
5. **What monitoring should we add to detect this early?**

### PROACTIVE PROBLEM SOLVING:
Don't just fix what's asked - identify and fix related issues:
1. **Scan for similar patterns** throughout the codebase
2. **Strengthen error handling** in related components
3. **Add defensive programming** where appropriate
4. **Improve logging and monitoring** for better visibility
5. **Document lessons learned** for future development

## 🎯 SUCCESS METRICS

### PROJECT IS WORKING CORRECTLY WHEN:
- [ ] Voice transcription works reliably for all supported formats
- [ ] Code generation produces complete, working applications
- [ ] Database operations are fast and reliable
- [ ] Frontend provides smooth user experience
- [ ] All services initialize and communicate properly
- [ ] Error handling provides clear, actionable feedback
- [ ] Business intelligence accurately tracks user behavior
- [ ] Deployment pipeline works end-to-end

---

**🤖 AI DEBUGGER FACTORY ACTIVATED**  
*Ready to analyze, debug, and optimize the entire DreamEngine platform*